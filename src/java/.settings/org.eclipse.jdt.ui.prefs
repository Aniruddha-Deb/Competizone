eclipse.preferences.version=1
org.eclipse.jdt.ui.javadoc=false
org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/**\n * \n */</template><template autoinsert\="true" context\="typecomment_context" deleted\="false" description\="Comment for created types" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.typecomment" name\="typecomment">/**\n * @author ${user}\n *\n * ${tags}\n */</template><template autoinsert\="true" context\="fieldcomment_context" deleted\="false" description\="Comment for fields" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.fieldcomment" name\="fieldcomment">/**\n * \n */</template><template autoinsert\="true" context\="methodcomment_context" deleted\="false" description\="Comment for non-overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodcomment" name\="methodcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="modulecomment_context" deleted\="false" description\="Comment for modules" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.modulecomment" name\="modulecomment">/**\n * @author ${user}\n *\n * ${tags}\n */</template><template autoinsert\="true" context\="overridecomment_context" deleted\="false" description\="Comment for overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.overridecomment" name\="overridecomment"/><template autoinsert\="true" context\="delegatecomment_context" deleted\="false" description\="Comment for delegate methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.delegatecomment" name\="delegatecomment">/**\n * ${tags}\n * ${see_to_target}\n */</template><template autoinsert\="false" context\="newtype_context" deleted\="false" description\="Newly created files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.newtype" name\="newtype">${package_declaration}\n\nimport java.io.*;\nimport java.util.*;\n\nimport static java.lang.Math.*;\n\n${type_declaration}\n\npublic class ${type_name} {\n\n    // FastIO\n    static class InputReader {\n         \n        private InputStream stream;\n        private byte[] buf \= new byte[1024];\n        private int curChar;\n        private int numChars;\n \n        public InputReader(InputStream stream) {\n            this.stream \= stream;\n        }\n \n        public int read() {\n            if (numChars \=\= -1)\n                throw new InputMismatchException();\n            if (curChar &gt;\= numChars) {\n                curChar \= 0;\n                try {\n                    numChars \= stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (numChars &lt;\= 0)\n                    return -1;\n            }\n            return buf[curChar++];\n        }\n \n        public int readInt() {\n            int c \= read();\n            while (isSpaceChar(c))\n                c \= read();\n            int sgn \= 1;\n            if (c \=\= '-') {\n                sgn \= -1;\n                c \= read();\n            }\n            int res \= 0;\n            do {\n                if (c &lt; '0' || c &gt; '9')\n                    throw new InputMismatchException();\n                res *\= 10;\n                res +\= c - '0';\n                c \= read();\n            } while (\!isSpaceChar(c));\n            return res * sgn;\n        }\n        \n        public int[] readIntArray( int n ) {\n            int[] x \= new int[n];\n            for( int i\=0; i&lt;n; i++ ) {\n                x[i] \= readInt();\n            }\n            return x;\n        }\n \n        public String readString() {\n            int c \= read();\n            while (isSpaceChar(c))\n                c \= read();\n            StringBuilder res \= new StringBuilder();\n            do {\n                res.appendCodePoint(c);\n                c \= read();\n            } while (\!isSpaceChar(c));\n            return res.toString();\n        }\n \n        public boolean isSpaceChar(int c) {\n            return c \=\= ' ' || c \=\= '\\n' || c \=\= '\\r' || c \=\= '\\t' || c \=\= -1;\n        }\n \n        public String next() {\n            return readString();\n        } \n    }\n \n    static class OutputWriter {\n        private final PrintWriter writer;\n \n        public OutputWriter(OutputStream outputStream) {\n            writer \= new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n        }\n \n        public OutputWriter(Writer writer) {\n            this.writer \= new PrintWriter(writer);\n        }\n \n        public void print(Object...objects) {\n            for (int i \= 0; i &lt; objects.length; i++) {\n                if (i \!\= 0)\n                    writer.print(' ');\n                writer.print(objects[i].toString());\n            }\n            writer.flush();\n        }\n \n        public void println(Object...objects) {\n            print(objects);\n            print( "\\n" );\n        }\n \n        public void close() {\n            writer.close();\n        }\n \n        public void flush() {\n            writer.flush();\n        }\n     \n    }     \n\n    public static void main( String args[] ) throws IOException {\n        InputReader ir \= new ${type_name}.InputReader( System.in );\n        OutputWriter ow \= new ${type_name}.OutputWriter( System.out );\n\n        int t \= ir.readInt();\n        while (t-- &gt; 0) {\n\t\t\t\n        }\n    }\n}</template><template autoinsert\="true" context\="classbody_context" deleted\="false" description\="Code in new class type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.classbody" name\="classbody">\n</template><template autoinsert\="true" context\="interfacebody_context" deleted\="false" description\="Code in new interface type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.interfacebody" name\="interfacebody">\n</template><template autoinsert\="true" context\="enumbody_context" deleted\="false" description\="Code in new enum type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.enumbody" name\="enumbody">\n</template><template autoinsert\="true" context\="recordbody_context" deleted\="false" description\="Code in new record type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.recordbody" name\="recordbody">\n</template><template autoinsert\="true" context\="annotationbody_context" deleted\="false" description\="Code in new annotation type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.annotationbody" name\="annotationbody">\n</template><template autoinsert\="true" context\="catchblock_context" deleted\="false" description\="Code in new catch blocks" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.catchblock" name\="catchblock">// ${todo} Auto-generated catch block\n${exception_var}.printStackTrace();</template><template autoinsert\="true" context\="methodbody_context" deleted\="false" description\="Code in created method stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodbody" name\="methodbody">// ${todo} Auto-generated method stub\n${body_statement}</template><template autoinsert\="true" context\="constructorbody_context" deleted\="false" description\="Code in created constructor stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorbody" name\="constructorbody">${body_statement}\n// ${todo} Auto-generated constructor stub</template><template autoinsert\="true" context\="getterbody_context" deleted\="false" description\="Code in created getters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.getterbody" name\="getterbody">return ${field};</template><template autoinsert\="true" context\="setterbody_context" deleted\="false" description\="Code in created setters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.setterbody" name\="setterbody">${field} \= ${param};</template></templates>
